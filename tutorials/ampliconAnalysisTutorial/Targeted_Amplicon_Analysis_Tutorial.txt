If you haven’t download bib-cpp yet do the following 
Change to home directory (or where ever you would to install it)

cd ~
git clone https://github.com/purcaro/bib-cpp.git
Call the setup script to download what is needed 
./setyp.py -bib-cpp
Targeted Amplicon Analysis Tutorial 

Three main programs all contained in sequenceTools
extractor - Extracts reads and optionally splits on barcodes and does some pre-analysis filtering on quality scores, presence of primers etc. 
qluster - Clusters extracted reads by allowing reads that differ by common sequencing errors to cluster together 
processCluster - Process clustered reads and do possible PCR multiple replicate analysis and optional population analysis 

All called by like the following 
sequenceTools [PROGRAM_NAME]
And more information can be attained for each
For detail help 
sequenceTools [PROGRAM_NAME] -help or sequenceTools [PROGRAM_NAME] -h
For all available flags 
sequenceTools [PROGRAM_NAME] -flags or sequenceTools [PROGRAM_NAME] -getFlags


Extractor 
Example with Illumina paired-end 
navigate to bib-cpp/tutorials/ampliconAnalysisTutorial/illumina_pairedEnd/
cd ~/bib-cpp/tutorials/ampliconAnalysisTutorial/illumina_pairedEnd/

Combine paired ends with pear (or whatever program you prefer, as long as it makes a singular fastq file), pear is download and put in the bib-cpp/bin as part of setup.py 
pear -f all_paired_dat1.fq -r all_paired_dat2.fq -o all_paired_dat

Now use extractor to separate out files by barcode and do some pre-analysis filtering 
sequenceTools extractor -fastq all_paired_dat.assembled.fastq -id id_file.tab.txt -minlen 200 -maxLen 300 -multiplex
id file should be tab delimited and in the following format 
gene	forwardPrimer	reversePrimer
[NAME1]	CCATCAGGGAAATGTCCAGT	TTTCCTGCATGTCTTGAACA
[NAME2]	GAAATGTCCAGTCCATCAGG	TTGTCTTGATTCCTGCAACA
…
id	barcode
MID01	ACGAGTGCGT
MID02	ACGCTCGACA
MID03	AGACGCACTC
…

The only requirement is the first two lines and the following id and barcode information is only needed if the sequence is multiplexed.  Can have any number of gene/targets 
[NAME] can be any name you would like to give to your target/gene eg. PFAMA1 
Flag Breakdown
-fastq all_paired_dat.assembled.fastq : name of the input sequence file 
-id id_file.tab.txt : Name of the id file to use to do the extraction by primer and possible MIDs
 -minlen 200 : the minimum read length to be included, anything smaller than 200 will be filtered out
-maxLen 300 : the maximum read length to be included, anteing longer than 300 will be filtered out
-multiplex : Indicates the input sequences are multiplexed and that they be extracted and separated by barcodes 

Move into output directory 
cd all_paired_dat.assembled_extractor_*
Extracted reads will be named with this scheme [NAME][MIDXX] where [NAME] is the name given in the -id file and the MID info will be there is the data is multiplexed
Any filtered off reads can be found in a directory filteredOff 
Can look at the extraction stats by looking at extractionProfile.tab.txt
If you just want to look at it in the terminal but in a nicely column delimited way you can call
sequenceTools catOrganized -file extractionProfile.tab.txt
Because this is simulated data the extraction details aren’t very exciting but in real data you might be able to spot a trouble area where you need to change you filtering parameters to get more reads 

Example with 454 sff file 
Navigate to bib-cpp/tutorials/ampliconAnalysisTutorial/454
cd ~/bib-cpp/tutorials/ampliconAnalysisTutorial/454

Unzip all_454sim.sff.gz

Convert sff file using Roche sffinfo or can use built in sffinfo in sequenceTools
sequenceTools sffinfo -file all_454sim.sff

Now use extractor to separate out files by barcode and do some pre-analysis filtering (normally can leave off -lower upper but in the tutorial it is need because the simulator used to create the sff file doesn’t make sequences lower case properly)
sequenceTools extractor -sff all_454sim.sff.txt -id id_file.txt -multiplex -maxLen 400 -trimTcag -lower upper
Move into output directory 
cd all_454sim.sff_extractor_*

Qluster
Move into the extraction folder create by extractor 
First create directory to store files by sample and PCR replicate for downstream analysis
sequenceTools makeSampleDirectories -file ../../generic_directory_names.tab.txt -dout popClus

Run qluster on each MID (1-8) 
Can run individually like the following 
sequenceTools qluster -alninfodir alnMaster -bestMatch -fastq PFAMA1MID01.fastq  -markchimeras -par ../../../../SeekDeepParameterFiles/gradualCollapse_lowKmer2 -removesingles -runCutOff 0.2% -v -dout PFAMA1MID01_TODAY -additionalOut popClus/locationByIndex/1.tab.txt

or you can take advantage of the batcher written into sequenceTools creatively and annoyingly long, named massRunWtihEnding which if you couldn’t guess from the name runs a program (supplied with -run eg. qluster) on all files in the currently directly with an ending (supplied by -ending eg. fastq) and then use the world THIS in all caps wherever you want to use the file name

sequenceTools massrunwithending -run qluster -ending fastq -alninfodir alnMaster -bestmatch -fastq THIS -markchimeras -par ../../../../SeekDeepParameterFiles/gradualCollapse_lowKmer2 -removesingles -runCutOff 0.2% -v -dout THIS_TODAY -additionalOut popClus/locationByIndex/1.tab.txt 
Flag Breakdown 
-alnInfoDir alnMaster :  This parameters allows information about the alignments to be saved in the directory alnMaster which means if ran again the program would run at a fraction of the speed.
-bestMatch : This flag says when a read finds another read that passes the current error profile cut off to first continue to look to see if it can find another read that passes the error profile as well but has a better alignment score
-fastq THIS : Name of the sequence file
-par ../../../../SeekDeepParameterFiles/gradualCollapse_lowKmer2 :  The parameters file that determines how many iteration to cluster for and what errors to allow on each iteration 
General format of file should colon (:) delimited, see sequenceTools qluster -help for more details
stopCheck:smallCutoff:1baseIndel:2baseIndel:>2baseIndel:HQMismatches:LQMismatches:LKMismatches
100:3:1:0:0:0:0:1
100:3:2:0:0:0:0:1
-markChimeras : This means the program will examine the final clusters and mark any clusters that could possibly be a chimera 
-removeSingles :  This doesn’t actually completely remove singles but one of the first steps of the program is to create clusters based on exact matches and then carry out the clustering.  This flags tells the program to leaves the singles out in the first clustering and then they will be reintroduced and the clustering down all over again.  This saves a great deal of time
-runCutOff 0.2% : This the program at what frequency should a k-mer containing a mismatch be considered a low frequency kmer, the 0.2% means that it will determines the frequency number by taking 0.2% of the total read amount so if there were 1000 reads, low frequency would be 2, a exact number can also be given for example -runCutOff 2
-v : Have the program being more verbose
-dout THIS_TODAY : The name of the output directory which defaults to [INPUT_FILENAME]_qluster_[DATE], because qluster is being ran by massRunWithEnding THIS will be substituted to the input file name.  Also in any sequenceTools program giving TODAY in all caps to a -dout flag will be replaced by the current date and time 
-additionalOut popClus/locationByIndex/1.tab.txt : this tells the program that should also in addition of putting an output file in it’s output directory it should also put one in the popClus directory as determined by the 1.tab.txt file, this way it doesn’t have to be moved by hand latter
In the output directory, which the name of which defaults to [FILENAME]_qluster_[DATE], will be several output files.  The two input files are output.fastq and outputInfo.tab.txt.  The output.fastq holds the final consensus sequence of the clustered reads and the outputInfo.tab.txt contains information about number of reads per cluster.  


This example is of a control mixture so we can map it to a the reference sequence of the known experimental strains using sequenceTools mapCounts 
Again the batch runner can be used
sequenceTools massrunwithending -run mapCounts -ending fastq -lower remove -fastq THIS -alnInfoDir alnMapMaster -checkChimeras -ref ../../pfama1_ref_example.fasta
-lower remove : this flag determines what to do with lower case bases which is often a sign of bad or undesirable sequence and giving this flag remove means the lower case bases will removed
-ref ../../pfama1_ref_example.fasta :  this flag determines the reference sequence to map the reads to and should be in fasta format.  If you want to map against a fastq file, you can use -refFastq [refSeqs.fastq] instead 
-fastq THIS : the name of the sequence file that contains the reads to be mapped to the references
-alnInfoDir alnMapMaster : This parameters allows information about the alignments to be saved in the directory alnMapMaster which means if ran again the program would run at a fraction of the speed.  

ProcessCluster 
Population and PCR multiple replicate analysis
Navigate into the popCluster folder created earlier 
cd popCluster
From within this directory call 

sequenceTools processClusters -fastq output.fastq -par ../../../../../SeekDeepParameterFiles/strict_noErrors_onlyHruns -alnInfoDir alnMaster -population -expect ../../../pfama1_ref_example.fasta -v

Flag breakdown 
 -fastq output.fastq : The name of the files in each samples/pcrRep folders
 -par ../../../../../SeekDeepParameterFiles/strict_noErrors_onlyHruns : Name of the parameters fill used to cluster the reads, see qluster explanation about the details of the file
 -alnInfoDir alnMaster :  This parameters allows information about the alignments to be saved in the directory alnMaster which means if ran again the program would run at a fraction of the speed.
 -population : Indicates once replicates in each sample are compared the final clusters should be compared across samples as well
 -expect ../../../pfama1_ref_example.fasta : If control or if one of the samples is a control mixture this can be used so the output info file has alignment info to the referenes

The default output directory is clusters_[DATE] (which can be changed with -dout) which contains several important output files but the main output file is called selectedClustersInfo.tab.txt because I’m super creative with names.  This contains basically any information you would want to know about the final clustering.  


To compare the predicted haplotypes frequencies against the mapped out frequencies 
First navigate back to extraction directory (where the qluster was ran) 
Combine all the mapped frequency files into one single file 
sequenceTools rbind -contains mapcounts,mapFreqInfo -r -header -outDelim tab >allMapFreqInfo.tab.txt 

Now run mapPopResults to compare the predicted results vs the mapped results
sequenceTools mapPopResults -pop popClus/clusters_*/selectedClustersInfo.tab.txt -map allMapFreqInfo.tab.txt -out illuminaPopResults
